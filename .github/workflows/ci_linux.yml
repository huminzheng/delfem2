# This is a basic workflow to help you get started with Actions

name: CI_Linux

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: checkout repository
      uses: actions/checkout@v2   

    - name: download_dependencies
      run: |
        git submodule update --init --recursive       

    - name: test_cpp
      run: |
        echo "###########################"
        echo "## fetch & build googletest"
        git submodule update --init -- 3rd_party/googletest
        cd 3rd_party/googletest
        cmake .
        make
        cd ../../

        echo "#####################################"
        echo "## build delfem2 test hdronly and run"
        cd test_cpp
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake -DUSE_HEADERONLY=OFF ..
        make
        ./runUnitTests
        cd ../../

        echo "###########################"
        echo "## build delfem test static" 
        cd test_cpp
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake -DUSE_HEADERONLY=ON ..
        make
        ./runUnitTests
        cd ../../    

    - name: build_glfw
      run: |
        echo "#####################"
        echo "## fetch & build glfw" 
        sudo apt-get update
        sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
        sudo apt-get install libxmu-dev xorg-dev
        sudo apt-get install libglfw3-dev 
        sudo apt-get install libopenal-dev
        sudo apt-get install libgl1-mesa-dev

        git submodule update --init -- 3rd_party/glfw
        cd 3rd_party/glfw
        cmake .
        make
        cd ../..

    - name: test_glfw_glold
      run: |
        echo ########################################
        echo ## build C++ glfw legacy Opengl examples

        cd examples_glfwold
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake -DUSE_HEADERONLY=ON ..
        make
        cd ../..

        cd examples_glfwold
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake -DUSE_HEADERONLY=OFF ..
        make
        cd ../..

    - name: test_glfw_glnew
      run: |
        echo ########################################
        echo ## build C++ glfw modern Opengl examples

        cd examples_glfwnew
        mkdir buildMakeHdronly && cd buildMakeHdronly
        cmake -DUSE_HEADERONLY=ON ..
        make
        cd ../..

        cd examples_glfwnew
        mkdir buildMakeStatic && cd buildMakeStatic
        cmake -DUSE_HEADERONLY=OFF ..
        make
        cd ../..

    - name: test_glut
      run: |
        echo ##########################
        echo ## build c++ glut examples

        sudo apt-get install freeglut3-dev 

        cd examples_glut
        mkdir buildMake && cd buildMake
        cmake ..
        make
        cd ../..

    - name: test_tinygl
      run: |
        echo ########################
        echo ## build tinygl examples

        cd examples_glfw_tinygltf_oldgl
        mkdir buildXcodeHdronly && cd buildXcodeHdronly
        cmake -DUSE_HEADERONLY=ON ..
        make .
        cd ../../

    - name: test_thread
      run: |
        echo ########################
        echo ## build thread examples

        cd examples_glfw_thread_oldgl
        mkdir buildXcodeHdronly && cd buildXcodeHdronly
        cmake -DUSE_HEADERONLY=ON ..
        make .
        cd ../../